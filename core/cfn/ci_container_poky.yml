Description: >-
    This template deploys an AWS CodeBuild project that
    builds the docker container used for YP builds. It depends on the
    CI Network template. Test

Parameters:
  NetworkStackName:
    Description: >-
        An environment name that is prefixed to resource names
    Type: String

  DockerhubSecretArn:
    Description: >-
        The secret you manually created to access DockerHub
    Type: String

  Prefix:
    Description: >-
        A unique prefix for objects that might clash on multiple instances
    Type: String
  GitHubOrg:
    Description: >-
       The GitHub organization or user to set the codebuild project for.
    Type: String
    Default: "aws"

Resources:

  CodeBuildImageRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub 'yoctoproject/${Prefix}/buildmachine-poky'
      RepositoryPolicyText: >-
            {
              "Version": "2008-10-17",
              "Statement": [
              {
                "Sid": "CodeBuildAccess",
                "Effect": "Allow",
                "Principal": {
                  "Service": "codebuild.amazonaws.com"
                },
                "Action": [
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:BatchGetImage",
                  "ecr:GetDownloadUrlForLayer"
                ]
                }
              ]
            }

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: true
      Description: >-
          The build process for creating an image and propagating to
          ECR for automated build processes.
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:4.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value: !Sub 'yoctoproject/${Prefix}/buildmachine-poky'
            Type: PLAINTEXT
          - Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
            Type: PLAINTEXT
          - Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
            Type: PLAINTEXT
          - Name: IMAGE_TAG
            Value: latest
            Type: PLAINTEXT
          - Name: dockerhub_username
            Value: !Sub "dockerhub_${Prefix}:username"
            Type: SECRETS_MANAGER
          - Name: dockerhub_password
            Value: !Sub "dockerhub_${Prefix}:password"
            Type: SECRETS_MANAGER
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildRole
      Source:
        BuildSpec: core/buildspec/ci_image.yml
        Location: !Join
          - ''
          - - "https://github.com/"
            - !Ref GitHubOrg
            - "/meta-aws-ci"
        Type: GITHUB
        SourceIdentifier: meta_aws_ci
      SourceVersion: master
      VpcConfig:
        VpcId:
          Fn::ImportValue:
            !Sub "${NetworkStackName}-VPC"
        Subnets:
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-PrivateSubnet1"
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-PrivateSubnet2"
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-NoIngressSecurityGroup"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccessBase
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'
        - PolicyName: CodeBuildAccessNetwork
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ec2:CreateNetworkInterfacePermission'
                Condition:
                  StringEquals:
                    'ec2:Subnet':
                      - !Join
                        - ''
                        - - 'arn:aws:ec2:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':network-interface:subnet/'
                          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet1"
                      - !Join
                        - ''
                        - - 'arn:aws:ec2:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':network-interface:subnet/'
                          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet2"
                    'ec2:AuthorizedService': 'codebuild.amazonaws.com'
                Effect: Allow
                Resource: !Join
                  - ''
                  - - 'arn:aws:ec2:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':network-interface/*'
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ecr:BatchCheckLayerAvailability'
                - 'ecr:CompleteLayerUpload'
                - 'ecr:GetAuthorizationToken'
                - 'ecr:InitiateLayerUpload'
                - 'ecr:PutImage'
                - 'ecr:UploadLayerPart'
                Effect: Allow
                Resource: '*'
        - PolicyName: SecretManagerAccessDH
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'secretsmanager:GetSecretValue'
                Effect: Allow
                Resource: !Ref DockerhubSecretArn
        - PolicyName: SecretManagerAccessCodebuild
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'secretsmanager:GetSecretValue'
                Effect: Allow
                Resource: !Join
                  - ''
                  - - 'arn:aws:secretsmanager:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':secret:/CodeBuild/*'
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                Effect: Allow
                Resource:
                - !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/codebuild/'
                    - !Ref AWS::StackName
                - !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/codebuild/'
                    - !Ref AWS::StackName
                    - ':*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 's3:PutObject'
                - 's3:GetObject'
                - 's3:GetObjectVersion'
                - 's3:GetBucketAcl'
                - 's3:GetBucketLocation'
                Effect: Allow
                Resource: "arn:aws:s3:::codepipeline-us-east-1-*"
