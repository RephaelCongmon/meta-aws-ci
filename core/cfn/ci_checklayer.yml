Description: >-
    This template deploys an AWS CodeBuild project that
    performs the layercheck.

Parameters:
  NetworkStackName:
    Description: >-
        An environment name that is prefixed to resource names
    Type: String
  ContainerRegistryUri:
    Description: >-
        The URI where the build machine image lives in REPOSITORY:TAG format.
    Type: String
  YoctoProjectRelease:
    Description: >-
        The Yocto release, i.e. zeus, dunfell, etc.
    Type: String
  GitHubOrg:
    Description: >-
       The GitHub organization or user to set the codebuild project for.
    Type: String
    Default: "aws"

Resources:
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: NO_ARTIFACTS
      BadgeEnabled: true
      Description: Layercheck- check layer validity
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: !Ref ContainerRegistryUri
        PrivilegedMode: true
        ImagePullCredentialsType: CODEBUILD
        EnvironmentVariables:
          - Name: YP_RELEASE
            Type: PLAINTEXT
            Value: !Ref YoctoProjectRelease
      Name: !Ref AWS::StackName
      ServiceRole: !Ref CodeBuildRole
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: PULL_REQUEST_UPDATED,  PULL_REQUEST_CREATED, PULL_REQUEST_REOPENED
            - Type: BASE_REF
              Pattern: !Join
                - ''
                - - '^refs/heads/'
                  - !Ref YoctoProjectRelease
              ExcludeMatchedPattern: false
      Source:
        BuildSpec: qa/buildspec.checklayer.yml
        Location: !Join
          - ''
          - - 'https://github.com/'
            - !Ref GitHubOrg
            - '/meta-aws'
        Type: GITHUB
        SourceIdentifier: meta_aws_layercheck
      SourceVersion: !Join
        - ''
        - - refs/heads/
          - !Ref YoctoProjectRelease
      VpcConfig:
        VpcId:
          Fn::ImportValue:
            !Sub "${NetworkStackName}-VPC"
        Subnets:
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-PrivateSubnet1"
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-PrivateSubnet2"
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-DefaultSecurityGroup"
          - Fn::ImportValue:
              !Sub "${NetworkStackName}-NoIngressSecurityGroup"

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccessBase
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                Effect: Allow
                Resource: '*'
        - PolicyName: CodeBuildAccessNetwork
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ec2:CreateNetworkInterfacePermission'
                Condition:
                  StringEquals:
                    'ec2:Subnet':
                      - !Join
                        - ''
                        - - 'arn:aws:ec2:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':network-interface:subnet/'
                          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet1"
                      - !Join
                        - ''
                        - - 'arn:aws:ec2:'
                          - !Ref 'AWS::Region'
                          - ':'
                          - !Ref 'AWS::AccountId'
                          - ':network-interface:subnet/'
                          - Fn::ImportValue: !Sub "${NetworkStackName}-PrivateSubnet2"
                    'ec2:AuthorizedService': 'codebuild.amazonaws.com'
                Effect: Allow
                Resource: !Join
                  - ''
                  - - 'arn:aws:ec2:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':network-interface/*'
        - PolicyName: LogsAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                Effect: Allow
                Resource:
                - !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/codebuild/'
                    - !Join
                      - ''
                      - - !Ref AWS::StackName
                        - "_YPBuildImage"
                - !Join
                  - ''
                  - - 'arn:aws:logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/codebuild/'
                    - !Join
                      - ''
                      - - !Ref AWS::StackName
                        - "_YPBuildImage"
                    - ':*'
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'ecr:BatchCheckLayerAvailability'
                Effect: Allow
                Resource: '*'
        - PolicyName: ECRAccessTest
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'ecr:BatchCheckLayerAvailability'
                Effect: Allow
                Resource: '*'
        - PolicyName: ECRAccessDummy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'ecr:BatchCheckLayerAvailability'
                Effect: Allow
                Resource: '*'
        - PolicyName: ECRAccessSecondDummy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'ecr:GetDownloadUrlForLayer'
                - 'ecr:BatchGetImage'
                - 'ecr:BatchCheckLayerAvailability'
                Effect: Allow
                Resource: '*'
